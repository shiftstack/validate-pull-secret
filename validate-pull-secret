#!/usr/bin/env bash

set -Eeuo pipefail

declare release_image='' installer='' authfile=''

# Get the installer release image from the passed binary, or from the one
# available in $PATH
get_installer_release_image() {
	declare installer
	installer="$1"

	if [ -z "$installer" ]; then
		installer="$(command -v 'openshift-install')" || return 0;
	else
		if ! [ -x "$installer" ]; then
			return 0
		fi
	fi

	"$installer" version | grep 'release image' | cut -d ' ' -f3
}

print_help() {
	echo 'ShiftStack validate-pull-secret'
	echo 'https://github.com/shiftstack/validate-pull-secret'
	echo
	echo 'Checks that the release images can be fetched with the given pull secret.'
	echo
	echo -e 'Requirements:'
	echo -e '\t* bash 4.4+'
	echo -e '\t* grep'
	echo -e '\t* jq [ https://stedolan.github.io/jq ]'
	echo -e '\t* podman'
	echo -e '\t* skopeo'
	echo -e '\t* openshift-installer for automatic image detection (required unless "-r" is used)'
	echo
	echo -e 'Usage:'
	echo -e "${0} [-i release_image] authfile"
	# shellcheck disable=SC2016
	echo -e '\t-i\tSpecify the installer binary. Will search in $PATH if neither -i nor -r are passed.'
	echo -e '\t-r\tSpecify the build image. Mutually exclusive with -i.'
	echo
	echo -e '\tauthfile\tPath of the pull secret.'
	echo
	echo -e '\t-h\tPrint this help'
}

unknown_flag() {
	echo 'Fatal error: unknown flag.'
	echo
	print_help
	exit 2
}

# Outputs the image-references JSON file from the given release image
extract_release_image_references() {
	declare release_image authfile
	release_image="$1"
	authfile="$2"

	podman pull --authfile "$authfile" "$release_image" >/dev/null
	podman run --rm \
		--authfile "$authfile" \
		--entrypoint sh \
		"$release_image" \
		-c 'cat /release-manifests/image-references'
}

# Parses the JSON data from `extract_release_image_references` and outputs the
# images one per line, in the format:
#
# image_name image_kind image_from
collect_image_references() {
	declare release_image authfile image_references
	release_image="$1"
	authfile="$2"

	image_references="$(mktemp)"
	extract_release_image_references "$release_image" "$authfile" > "$image_references"
	jq -r '.spec.tags[] | "\(.name) \(.from.kind) \(.from.name)"' "$image_references"
}


### Done with declarations, start doing something

# Parse flags
while getopts r:i:h opt; do
	case "$opt" in
		r) release_image="$OPTARG" ;;
		i) installer="$OPTARG"     ;;
		h) print_help; exit 0      ;;
		*) unknown_flag            ;;
	esac
done

shift "$((OPTIND-1))"

if [ -n "$release_image" ] && [ -n "$installer" ]; then
	>&2 echo "Fatal error: -r and -i are mutually exclusive."
	exit 2
fi

if [ "$#" -ne 1 ]; then
	>&2 echo "Fatal error: Wrong number of positional arguments; expected 1, got $#."
	exit 2
fi

authfile="$1"

if [ -z "$authfile" ]; then
	>&2 echo 'Fatal error: Missing the pull secret filename'
	exit 2
fi

if ! [ -f "$authfile" ]; then
	>&2 echo "Fatal error: $authfile is not a file."
	exit 2
fi


# If release_image is not specified with the "-i" flag, then ask openshift-install
release_image="${release_image:-$(get_installer_release_image "$installer")}"
if [ -z "$release_image" ]; then
	>&2 echo ' Fatal error: Could not find the release image'
	exit 2
fi
>&2 echo "Using release image: ${release_image}"

parsed_lines="$(mktemp)"
collect_image_references "$release_image" "$authfile" > "$parsed_lines"
>&2 echo "Parsed the release data, found $(wc -l < "$parsed_lines") images"

while read -r line; do
	declare image_name image_from
	mapfile -td ' ' < <(printf "%s" "$line")
	image_name="${MAPFILE[0]}"
	image_from="${MAPFILE[2]}"

	>&2 echo -n "Processing $image_name... "
	if skopeo --command-timeout '20s' inspect --authfile "${authfile}" "docker://${image_from}" >/dev/null; then
		echo "OK"
	else
		echo
		echo "Failed image URL: $image_from"
		exit 1
	fi
done < "$parsed_lines"
